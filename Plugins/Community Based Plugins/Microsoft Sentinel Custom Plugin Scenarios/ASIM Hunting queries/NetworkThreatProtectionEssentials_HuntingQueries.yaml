Descriptor:
  Name: Network Threat Protection Essentials - ASIM 
  DisplayName: Network Threat Protection Essentials - Hunting Queries (Preview)
  Description: identifies suspicious network behavior based on various data sources ingested in Sentinel. The solution contains queries to detect common network-based attacks - things like malicious user agents, mining pools, Base64 encoded IPv4 address in request URL etc.
  Settings:
    - Name: TenantId
      Required: true
    - Name: WorkspaceName
      Required: true
    - Name: SubscriptionId
      Required: true
    - Name: ResourceGroupName
      Required: true
  SupportedAuthTypes:
    - None

SkillGroups:
  - Format: KQL
    Skills:
      - Name: Base64 encoded IPv4 address in request url
        DisplayName: Base64 encoded IPv4 address in request url (Preview)
        Description: This query detects Base64-encoded IPv4 addresses in outbound request URLs. It uses pre-computed base64 offsets for IPv4 sequences, eliminating the need for decoding. After identifying a candidate,the query extracts the plaintext IPv4 address pattern.
        Settings:
          Target: Sentinel
          # The ID of the AAD Organization that the Sentinel workspace is in.
          TenantId: '{{TenantId}}'
          # The id of the Azure Subscription that the Sentinel workspace is in.
          SubscriptionId: '{{SubscriptionId}}'
          # The name of the Resource Group that the Sentinel workspace is in.
          ResourceGroupName: '{{ResourceGroupName}}'
          # The name of the Sentinel workspace.
          WorkspaceName: '{{WorkspaceName}}'
          # This query detects potential network beaconing activity
          Template: |-
                let starttime = todatetime('{{StartTimeISO}}');
                let endtime = todatetime('{{EndTimeISO}}');
                let ipv4_plaintext_extraction_regex = @"((?:(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\.)){3}(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1,3})";
                let ipv4_encoded_identification_regex = @"\=([a-zA-Z0-9\/\+]*(?:(?:MC|Au|wL|MS|Eu|xL|Mi|Iu|yL|My|Mu|zL|NC|Qu|0L|NS|Uu|1L|Ni|Yu|2L|Ny|cu|3L|OC|gu|4L|OS|ku|5L){1}[a-zA-Z0-9\/\+]{2,4}){3}[a-zA-Z0-9\/\+\=]*)";
                let ipv4_decoded_hex_extract = @"((?:(?:61|62|63|64|65|66|67|68|69|6a|6b|6c|6d|6e|6f|70|71|72|73|74|75|76|77|78|79|7a|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f|50|51|52|53|54|55|56|57|58|59|5a|2f|2b|3d),){7,15})";
                CommonSecurityLog
                | where TimeGenerated between(starttime .. endtime)
                | where isnotempty(RequestURL)
                // Identify requests with encoded IPv4 addresses
                | where RequestURL matches regex ipv4_encoded_identification_regex
                | project TimeGenerated, RequestURL
                // Extract IP candidates in their base64 encoded format, significantly reducing the dataset
                | extend extracted_encoded_ip_candidate = extract_all(ipv4_encoded_identification_regex, RequestURL)
                // We could have more than one candidate, expand them out
                | mv-expand extracted_encoded_ip_candidate to typeof(string)
                | summarize Start=min(TimeGenerated), End=max(TimeGenerated), make_set(RequestURL,100) by extracted_encoded_ip_candidate
                // Pad if we need to
                | extend extracted_encoded_ip_candidate = iff(strlen(extracted_encoded_ip_candidate) % 2 == 0, extracted_encoded_ip_candidate, strcat(extracted_encoded_ip_candidate, "="))
                // Now decode the candidate to a long array, we cannot go straight to string as it cannot handle non-UTF8, we need to strip that first
                | extend extracted_encoded_ip_candidate = tostring(base64_decode_toarray(extracted_encoded_ip_candidate))
                // Extract the IP candidates from the array
                | extend hex_extracted = extract_all(ipv4_decoded_hex_extract, extracted_encoded_ip_candidate)
                // Expand, it's still possible that we might have more than 1 IP
                | mv-expand hex_extracted
                // Now we should have a clean string. We need to put it back into a dynamic array for converting back to a string
                | extend hex_extracted = trim_end(",", tostring(hex_extracted))
                | extend hex_extracted = strcat("[",hex_extracted,"]")
                | extend hex_extracted = todynamic(hex_extracted)
                | extend extracted_encoded_ip_candidate = todynamic(extracted_encoded_ip_candidate)
                // Convert the array back into a string
                | extend decoded_ip_candidate = make_string(hex_extracted)
                | summarize by decoded_ip_candidate, tostring(set_RequestURL), Start, End
                // Now the IP candidates will be in plaintext, extract the IPs using a regex
                | extend ipmatch = extract_all(ipv4_plaintext_extraction_regex, decoded_ip_candidate)
                // If it's not an IP, throw it out
                | where isnotnull(ipmatch)
                | mv-expand ipmatch to typeof(string)
                | extend timestamp = Start
                | extend IP_0_Address = ipmatch
  - Format: KQL
    Skills:
      - Name: Risky base64 encoded command in URL
        DisplayName: Risky base64 encoded command in URL (Preview)
        Description: This query detects risky Base64-encoded commands in web requests. It identifies potential C2 server communication and illuminates injected webshells. Note that base64 is case-sensitive, requiring multiple permutations for full coverage.
        Settings:
          Target: Sentinel
          # The ID of the AAD Organization that the Sentinel workspace is in.
          TenantId: '{{TenantId}}'
          # The id of the Azure Subscription that the Sentinel workspace is in.
          SubscriptionId: '{{SubscriptionId}}'
          # The name of the Resource Group that the Sentinel workspace is in.
          ResourceGroupName: '{{ResourceGroupName}}'
          # The name of the Sentinel workspace.
          WorkspaceName: '{{WorkspaceName}}'
          # This query detects potential network beaconing activity
          Template: |-
                let mapping = datatable (CommandFound:string, match_list:dynamic) [
                "whoami", dynamic(['d2hvYW1p', 'dob2Fta', '3aG9hbW']),
                "net share", dynamic(['bmV0IHNoYXJl', '5ldCBzaGFyZ', 'uZXQgc2hhcm']),
                "net use", dynamic(['bmV0IHVzZ', '5ldCB1c2', 'uZXQgdXNl']),
                "net view", dynamic(['bmV0IHZpZX', '5ldCB2aWV3', 'uZXQgdmlld']),
                "ipconfig", dynamic(['aXBjb25maWc', 'lwY29uZmln', 'pcGNvbmZpZ']),
                "net sh", dynamic(['bmV0c2gg', '5ldHNoI', 'uZXRzaC']),
                "schtasks", dynamic(['2NodGFza3', 'NjaHRhc2tz', 'zY2h0YXNrc']),
                "Invoke- ", dynamic(['SW52b2tlL', 'ludm9rZS', 'JbnZva2Ut']),
                ];
                let riskyCommandRegex = @"(d2hvYW1p|dob2Fta|3aG9hbW|bmV0IHNoYXJl|5ldCBzaGFyZ|uZXQgc2hhcm|bmV0IHVzZ|5ldCB1c2|uZXQgdXNl|bmV0IHZpZX|5ldCB2aWV3|uZXQgdmlld|aXBjb25maWc|lwY29uZmln|pcGNvbmZpZ|bmV0c2gg|5ldHNoI|uZXRzaC|2NodGFza3|NjaHRhc2tz|zY2h0YXNrc|SW52b2tlL|ludm9rZS|JbnZva2Ut)";
                CommonSecurityLog
                | where TimeGenerated > ago(3d)
                | where RequestURL matches regex riskyCommandRegex
                | extend B64MatchData = extract_all(riskyCommandRegex, RequestURL)
                | where isnotempty(B64MatchData)
                | mv-expand B64MatchData to typeof(string)
                | join kind=leftouter ( 
                    mapping
                    | mv-expand match_list to typeof(string)
                ) on $left.B64MatchData == $right.match_list
                | project TimeGenerated, B64MatchData, CommandFound, RequestURL, RequestMethod, DestinationHostName, DestinationIP, SourceIP, DeviceVendor, DeviceProduct, Activity
                | extend timestamp = TimeGenerated
                | extend HostName = tostring(split(DestinationHostName, '.', 0)[0]), DnsDomain = tostring(strcat_array(array_slice(split(DestinationHostName, '.'), 1, -1), '.'))
                | extend IP_0_Address = SourceIP
                | extend IP_1_Address = DestinationIP
                | extend DNS_0_HostName = HostName
                | extend DNS_0_DnsDomain = DnsDomain  
  - Format: KQL
    Skills:
      - Name: Exploit and Pentest Framework User Agent
        DisplayName: Exploit and Pentest Framework User Agent (Preview)
        Description: This query detects suspicious user agent strings used by exploit and pen test frameworks.
        Settings:
          Target: Sentinel
          # The ID of the AAD Organization that the Sentinel workspace is in.
          TenantId: '{{TenantId}}'
          # The id of the Azure Subscription that the Sentinel workspace is in.
          SubscriptionId: '{{SubscriptionId}}'
          # The name of the Resource Group that the Sentinel workspace is in.
          ResourceGroupName: '{{ResourceGroupName}}'
          # The name of the Sentinel workspace.
          WorkspaceName: '{{WorkspaceName}}'
          # This query detects potential network beaconing activity
          Template: |-
            let UserAgentList = "Internet Explorer |Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1; SV1; InfoPath\\.2\\)|Mozilla/5\\.0 \\(Windows NT 10\\.0; Win32; x32; rv:60\\.0\\)|Mozilla/4\\.0 \\(compatible; Metasploit RSPEC\\)|Mozilla/4\\.0 \\(compatible; MSIE 6\\.1; Windows NT\\)|Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1\\)|Mozilla/4\\.0 \\(compatible; MSIE 8\\.0; Windows NT 6\\.0; Trident/4\\.0\\)|Mozilla/4\\.0 \\(compatible; MSIE 7\\.0; Windows NT 6\\.0; Trident/4\\.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; \\.N\\)|Mozilla/5\\.0 \\(Windows; U; Windows NT 5\\.1; en-US\\) AppleWebKit/525\\.13 \\(KHTML, like Gecko\\) Chrome/4\\.0\\.221\\.6 Safari/525\\.13|Mozilla/5\\.0 \\(compatible; MSIE 9\\.0; Windows NT 6\\.1; WOW64; Trident/5\\.0; MAAU\\)|Mozilla/5\\.0[^\\s]|Mozilla/4\\.0 \\(compatible; SPIPE/1\\.0\\)|Mozilla/5\\.0 \\(Windows NT 6\\.3; rv:39\\.0\\) Gecko/20100101 Firefox/35\\.0|Sametime Community Agent|X-FORWARDED-FOR|DotDotPwn v2\\.1|SIPDROID|wordpress hash grabber|exploit|okhttp/";
            // Excluding for IIS, as the main malicious usage for okhttp that we have seen was in the OfficeActivity logs and this can create noise for IIS.
            let ExcludeIIS = "okhttp/";
            (union isfuzzy=true
            (OfficeActivity
            | where ExtendedProperties has "UserAgent"
            | extend UserAgent = extractjson("$[0].Value", ExtendedProperties, typeof(string))
            | where UserAgent matches regex UserAgentList
            | extend SourceIP = ClientIP
            | project TimeGenerated, Type, UserAgent, SourceIP
            ),
            (
            W3CIISLog
            | extend UserAgent = replace('\\+', ' ', csUserAgent) 
            | where UserAgent matches regex UserAgentList
            | where UserAgent !startswith ExcludeIIS
            | extend SourceIP = cIP
            | project TimeGenerated, Type, UserAgent, SourceIP
            ),
            (
            AWSCloudTrail
            | where UserAgent matches regex UserAgentList
            | extend SourceIP = SourceIpAddress
            | project TimeGenerated, Type, UserAgent, SourceIP
            ))
            | summarize min(TimeGenerated), max(TimeGenerated), count() by Type, UserAgent, SourceIP
            | extend timestamp = min_TimeGenerated
            | extend IP_0_Address = SourceIP